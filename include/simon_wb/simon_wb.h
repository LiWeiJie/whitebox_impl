/*
 * @Author: Weijie Li 
 * @Date: 2018-06-23 10:23:54
 * @Last Modified by: Weijie Li
 * @Last Modified time: 2018-06-27 14:46:03
 */

#ifndef _SIMON_WB_H_
#define _SIMON_WB_H_

#include <simon/simon.h>
#include <math/affine_transform.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif


#define SIMON_WHITEBOX_ROUND_MAX 68

#define SIMON_ENCRYPT 1
#define SIMON_DECRYPT 0

#define PIECE_SIZE 8   //how many bits in a piece
#if PIECE_SIZE == 8
typedef uint8_t simon_wb_unit;
typedef simon_wb_unit piece_t[1<<PIECE_SIZE];
#endif


typedef struct simon_wb_t{
    enum cipher_config_t cfg;
    int piece_size;
    uint32_t rounds;
    int aff_in_round;
    int block_size;
    int piece_count;   // piece_count = block_size / 8, every 8 bit combined as a piece
    AffineTransform * round_aff;
    piece_t* lut; // piece_count look up table (combined with round key) needed for every round
    piece_t** and_table;  
    piece_t* SE; // start encode
    piece_t* EE; // end encode
} simon_whitebox_content;

/**
 * @brief simon whitebox encrypto function  
 * 
 * @param in both plaintext and ciphertext are ok, only accept one block: 16 uint8_t 
 * @param out the text that processed by simon_wb_ctx 
 * @param simon_wb_ctx simon_whitebox ctx, generated by int simon_wb_gen_tables(const uint8_t *key, simon_whitebox_content *simon_wb_ctx, int enc) or int simon_wb_gen_tables_with_dummyrounds(const uint8_t *key, simon_whitebox_content *simon_wb_ctx, int enc, int dummyrounds);
 */
int simon_wb_enc(simon_whitebox_content * swc, const uint8_t *in, uint8_t *out);

#define simon_wb_encrypt(simon_wb_ctx, in, out) simon_wb_enc(simon_wb_ctx, in, out)
#define simon_wb_decrypt(simon_wb_ctx, in, out) simon_wb_enc(simon_wb_ctx, in, out)

/**
 * @brief export simon_whitebox_content to byte
 * 
 * @param ctx a pointer of simon_whitebox_content
 * @param dest a pointer to a pointer of byte[], warning: must be free outside, must be NULL
 * @return int byte[] size
 */
int simon_wb_export_to_bytes(const simon_whitebox_content* swc, uint8_t **dest) ;

/**
 * @brief import simon_whitebox_content from str
 * 
 * @param source 
 * @return simon_whitebox_content * 
 */
int  simon_wb_import_from_bytes(const uint8_t *source, simon_whitebox_content* swc);

/**
 * @brief release the space of simon_whitebox_content
 * 
 * @param simon_whitebox_content 
 * @return int 0 is successful, otherwise fault
 */
int simon_whitebox_release(simon_whitebox_content *swc);

#ifdef __cplusplus
}
#endif


#endif //_SIMON_WB_H_